<!--排行榜-->
<style>

page {
  display: block;
  min-height: 100%;
  background-color: #FFFFFF;
}


.ranking-button{
  display: flex;
  flex-direction: row;
  width: 100%;
  background-color: #ffffff;
}
.default{
  font-size: 30rpx;
  width: 150rpx;
  height: 50rpx;
  border-bottom: solid 4rpx #F1F1F1;
  text-align: center;
}
.choose{
  border-bottom:solid 4rpx #7cb5ec;
}

.top-three{
  width:700rpx;
  height: 450rpx;
  margin:0 0 15rpx 25rpx;  
  background-color: #FFFFFF;
  border:solid 4rpx #F1F1F1;
  border-top :none;
  display: flex;
  flex-direction: row;
}

.person{
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}
.person image{
  width: 20rpx;
  height: 20rpx;
}
.person text{
  width: 180rpx;
  height: 50rpx;
  text-align: center;
  line-height: 50rpx;
  font-size: 33rpx;
  white-space:nowrap; 
  overflow:hidden; 
  text-overflow:ellipsis;
}
.person .avatar{
 width: 130rpx;
 height: 130rpx;
 border-radius: 50%;
 margin-bottom: 10rpx;
}

.person.center image{
  width: 60rpx;
  height: 50rpx;
  margin-top: 20rpx;
}
.person.center .avatar{
 width: 150rpx;
 height: 150rpx;
 border-radius: 50%;
 margin-top: -8rpx;
 margin-bottom: 10rpx;
}

/**以下文件出自colorUI，做了自定义修改*/
.cu-list.menu-avatar>.cu-item>.cu-avatar {
  position: absolute;
  left: 80rpx;
}
.cu-list.menu-avatar>.cu-item .content {
  position: absolute;
  left: 196rpx;
  width: calc(100% - 96rpx - 60rpx - 120rpx - 20rpx);
  line-height: 1.6em;
}
.cu-list.menu-avatar>.cu-item .content>.text-grey.name{
  white-space:nowrap; 
  overflow:hidden; 
  text-overflow:ellipsis;
}
.cu-list.menu-avatar>.cu-item .rank-number{
  position: absolute;
  left: 0rpx;
  width: 80rpx;
  line-height: 1.6em;
  text-align: center;
  font-size: 38rpx;
}
.cu-list.menu-avatar>.cu-item .action {
  width: 100rpx;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
}
.cu-list.menu-avatar>.cu-item .action .like-number{
 width:50rpx;
 margin-top: 15rpx;
}

</style>

<template>
  <!--
	<view class="cu-custom" style="height:{{CustomBar}}px;">
  <view class="cu-bar fixed gradual-blue" style="height:{{CustomBar}}px;padding-top:{{StatusBar}}px;">
  <navigator class='action' open-type="navigateBack" delta="1" hover-class="none">
      <text class='icon-back'></text>排行榜
    </navigator>
  </view>
  </view>
  -->
  <!--ranking-button begain-->
  <!--为了底部按钮被选中时的颜色条和那条灰色的能在一条线上，只能多插几个空余的vive了,用来占地方-->
  <view class="ranking-button" style="padding-top:{{CustomBar+10}}px;">
    <view class="default" style="width:25rpx;margin-left:25rpx;" ></view>
    <view class="default {{button=='day'?'choose':''}}" @tap="day">TODAY</view>
    <view class="default" style="width:100rpx;" ></view>
    <view class="default {{button=='week'?'choose':''}}" @tap="week">WEEK</view>
    <view class="default" style="width:100rpx;" ></view>
    <view class="default {{button=='history'?'choose':''}}" @tap="history">ALLTIME</view>
    <view class="default" style="width:25rpx;" ></view>
  </view>
  <!--ranking-button end-->


  <!--top-three begain-->
  <view class="top-three"> 

    <view class="person" style="flex:2;">
      <image src="./image/up.png" style="margin-top: 110rpx;"></image>
      <text style="margin-top:0;">2</text>
      <image class="avatar" src="{{element[1]==undefined ? 'http://ppsgt1wc7.bkt.clouddn.com/v2-567dcc4ed3ea4977d541475390fc375a_r.jpg':element[1].avatarUrl}}"></image>
      <text>{{element[1]==undefined ? '小白':element[1].name}}</text>
    </view>

    <view class="person center" style="flex:3;">
      <image src="./image/champion.png"></image>
      <image class="avatar" src="{{element[0]==undefined ? 'http://ppsgt1wc7.bkt.clouddn.com/p1003171602.jpg':element[0].avatarUrl}}"></image>
      <text>{{element[0]==undefined ? 'Gal Gadot':element[0].name}}</text>
    </view>

    <view class="person" style="flex:2;">
      <text style="margin-top:110rpx;">3</text>
      <image src="./image/down.png" style="margin-bottom:10rpx;"></image>
      <image class="avatar" src="{{element[2]==undefined ? 'http://ppsgt1wc7.bkt.clouddn.com/PvhmOQI04Z.jpg':element[2].avatarUrl}}"></image>
      <text>{{element[2]==undefined ? 'Groot':element[2].name}}</text>
    </view>

  </view>
  <!--top-three end-->

  <view class="cu-list menu-avatar">

    <view class="cu-item" wx:for="{{element}}">
      <view class="rank-number">{{index+1}}</view>
      <view class="cu-avatar round lg" style="background-image:url({{item.avatarUrl}});"></view>
      <view class="content">
        <view class="text-grey name">{{item.name}}</view>
        <view class="text-gray text-sm flex">
          <text class="text-cut">
            <text class="icon-time text-red  margin-right-xs"></text> {{item.times}}
          </text>
        </view>
      </view>
      <view class="action">
        <text class="icon-likefill lg text-red"></text>
        <view class="cu-tag round bg-grey sm like-number">5</view>
      </view>
    </view>

  </view>


</template>


<script>
  import wepy from 'wepy'
  var wxCharts = require('../components/wxcharts-min.js')
  var ringChart = null

  export default class Rangking extends wepy.page {
    config = {
      navigationBarTitleText: '排行榜',
      usingComponents:{
      },
      enablePullDownRefresh: true,//关闭下拉刷新 
      backgroundTextStyle: "dark",//白色主题启用深色模式，在下拉刷新时才能有白色圆点
    }
    components = {
    }

    mixins = []

    data = {
     StatusBar:"",
     CustomBar:"",
     one:"张三",
     two:"李四",
     three:"王五",
     elements:[],//这是保存三个排行榜的数组
     element:[],//这是保存用来渲染前端被选中的那个排行榜的数组
     button:"history",//默认选择日榜
    }

    computed = {
      
    }

    methods = {
      day(){
        //TODAY
        this.button="day"
        if(this.data.elements[0].length==0){
          this.toast("今天还没人哦！","none",1000)
        }
        this.element=this.data.elements[0]

      },
      week(){
        //week
        this.button="week"
        if(this.data.elements[1].length==0){
          this.toast("这周还没人哦！","none",1000)
        }
        this.element=this.data.elements[1]
      },
      history(){
        //alltime
        this.button="history"
        if(this.data.elements[2].length==0){
          this.toast("目前还没人哦！","none",1000)
        }
        this.element=this.data.elements[2]
      }

    }

    events = {
      
    }

    onLoad(options) {
      //生命周期函数--监听页面加载
      this.StatusBar=this.$parent.globalData.StatusBar
      this.CustomBar=this.$parent.globalData.CustomBar
    }

    onShow(){
      this.getMsg()
    }


    onPullDownRefresh(){
      //页面相关事件处理函数--监听用户下拉动作
      this.log("onPullDownRefresh")
      this.getMsg()
      setTimeout(function(){  wx.stopPullDownRefresh()},1000)
    }

    toast(title,icon,duration){
      //自己封装的Toast函数
      wx.showToast({
        title:title,
        icon: icon,
        duration:duration
      })
    }

    log(res){
      //自己封装的log函数
      console.log("rangking:  "+res)
    }

    getMsg(){
      var that=this
      wx.request({
      url:that.$parent.globalData.url + "time/queryRank",
      method: 'GET',
      data: {},
      header: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      complete: function (res) {
        if (res.statusCode != 200) {
          that.log("网络传输有错误！");
          that.toast("网络连接失败！","",1500)
        } else if(res.data==""){
          that.toast("服务器出错！","",700)
        }else{
          //得到的数据时从大到小排列的
          that.data.elements=res.data
          that.calculateTime()
          console.log(res.data)
        }
      }
    })
    }

    calculateTime(){
      //计算时间的格式,将秒数修改为更人性化的提示
      let str=this.data.elements
      for(let i=0;i<3;i++){

        if(str[i].length==0){
          continue
        }

        for(let j=0;j<str[i].length;j++){
          let time=str[i][j].times

          if(time >= 3600){
            time= "共专注了"+Math.floor(time/3600)+"小时"
          }else if(time >= 60 && time <3600){
            time="共专注了"+Math.floor(time/60)+"分钟"
          }else{
            time="共专注了"+time+"秒"
          }

          str[i][j].times=time
        }
      }
      //console.log(str)
      this.data.elements=str
      //优先展示历史排行榜
      this.element=str[2]
      this.$apply()
    }
    
    
  }
</script>
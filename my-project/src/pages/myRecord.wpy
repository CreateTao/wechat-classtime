<!--我的记录-->
<style>
.button{margin-top: 50rpx;width: 50%;background-color: #19be6b;color: #495060;}
.work{margin-top: 60rpx;width: 90%;height: 800rpx;background-color: #f8f8f9;}
.page{width: 90%;height:100rpx;margin-top: 30rpx;}

.month{width: 100rpx;margin-left: 40rpx;margin-top: 10rpx;background-color: #45c8af;border-radius:10rpx;padding-left:25rpx;}
.day_item{display: flex;flex-direction: row;font-size: 30rpx;margin-bottom: 10rpx; padding-top: 10rpx;}
.day{padding-left: 55rpx;width:100rpx;border-right:5rpx solid rgb(21, 77, 87)}
.view1{width:80rpx;margin-left: 20rpx;}
.view2{width:200rpx;margin-left: 20rpx;}

.cu{
  height: 1000rpx;
  background-color: #ffffff;
  overflow:scroll;
}
.text{
  width: 200rpx;
  margin-left: 30rpx;
  text-align: center;
  background-color: #8DC63F;
  white-space:nowrap; 
  overflow:hidden; 
  text-overflow:ellipsis;
}
/**以下格式摘自colorUI，做了自定义适配**/
.cu-timeline .cu-time{
  width: 150rpx;
  text-align: center;
  padding: 10rpx 0;
  margin-left: 20rpx;
  font-size: 40rpx;
  color: #8799A3;
  display: block;
}

</style>

<template>
  <view class="cu-custom" style="height:{{CustomBar}}px;">
  <view class="cu-bar fixed gradual-blue" style="height:{{CustomBar}}px;padding-top:{{StatusBar}}px;">
    <navigator class='action' open-type="navigateBack" delta="1" hover-class="none">
      <text class='icon-back'></text>我的记录
    </navigator>
  </view>
  </view>

  <!--myRecord msg begain-->
  <view class="cu">
  <view class="cu-timeline" wx:for="{{msg}}">

    <view class="cu-time" wx:if="{{item[0]!=0}}">{{item[0]}}年</view>
    <view class="cu-time" style="font-size:36rpx;" wx:if="{{item[1]!=0}}">{{item[1]}}月</view>
    <view class="cu-item cur text-mauve icon-time">
      <view class="content bg-olive shadow-blur">
        <text class="text" space="emsp" style="margin-left: 10rpx;">{{item[2]}}日 {{item[3]}}-{{item[4]}}</text>
        <text class="text">专注{{item[5]}}</text>
        <text class="text">暂停{{item[6]}}次</text>
      </view>
    </view>

  </view>
  </view>
  <!--myRecord msg end-->

  <!--button begain-->
	<view class="container"> 
   <view class="record-bottom">
    <view class="re-bo-item" bindtap="last">
      <view class='icon-back lg text-gray' ></view>
      <view >上一页</view>
    </view>
    <view class="re-bo-item" style="margin-left:200rpx;">
      {{current}}/{{total}}
    </view>
    <view class="re-bo-item" style="margin-left:200rpx;"  bindtap="next">
      <view class='icon-right lg text-gray'></view>
      <view >下一页</view>
    </view>
  </view>
</view>
<!--button end-->


</template>


<script>
  import wepy from 'wepy'

  export default class MyRecord extends wepy.page {
    config = {
      navigationBarTitleText: '我的记录',
      usingComponents:{
      },
      enablePullDownRefresh: true,//开启下拉刷新 
      backgroundTextStyle: "dark",//白色主题启用深色模式，在下拉刷新时才能有白色圆点
    }
    components = {
    }

    mixins = []

    data = {
     current: 1,//当前页数
     total:1,//总页数
     totalElements:0,//总记录数
     msg:[],
     StatusBar:"",
     CustomBar:"",
    }

    computed = {
      
    }

    methods = {
      iCreateRoom(){
        this.$navigate({url:"./myRoomRecord"})
      },
      last(){
        //上一页
        if(this.data.current > 1){
          this.current=this.data.current-1
          this.log(this.data.current)
          this.getMsg()
        }
      },
      next(){
        //下一页
        if(this.data.current < this.data.total){
          this.current=this.data.current+1
          this.log(this.data.current)
          this.getMsg()
        }
      }
    }

    events = {
      
    }

    onLoad(options) {
      //生命周期函数--监听页面加载 
      this.getMsg()
      this.StatusBar=this.$parent.globalData.StatusBar
      this.CustomBar=this.$parent.globalData.CustomBar
    }

    onPullDownRefresh(){
      //页面相关事件处理函数--监听用户下拉动作
      this.log("onPullDownRefresh")
      setTimeout(function(){  wx.stopPullDownRefresh()},1000)
      this.getMsg()
    }


    toast(title,icon,duration){
      //自己封装的Toast函数
      wx.showToast({
        title:title,
        icon: icon,
        duration:duration
      })
    }

    log(res){
      //自己封装的log函数
      console.log("myRecord:  "+res)
    }

    getMsg(){
      var that=this;
      this.msg=new Array()
      this.$apply()
      wx.request({
        url: that.$parent.globalData.url + "user/myRecord",
        method: 'GET',
        data: { 'openId': that.$parent.globalData.openId,
                  'pageNum':that.data.current-1 },
        header: {
          "Content-Type": "application/x-www-form-urlencoded"
        },
        complete: function (res) {
          if (res.statusCode != 200) {
            that.log("网络连接失败！");
            that.toast("网络连接失败！","none",1000);
            return;
          }else{
            if(res.data==""){
              //服务器返回的是null
              that.msg=[]
              that.$apply()
              return
            }
            console.log(res.data);
            that.totalElements=res.data.totalElements
            that.total=res.data.totalPages
            var i = res.data.content.length;
            if(i==0){
              that.toast("您暂无记录！","none",1000);
            }
            var msg = new Array(i);
            if(i!=0){
              var k = res.data.content[0].dates.split(".")[0];
              //var t = res.data.content[0].dates.split(".")[1];
              var t = 100
            }
            for (var j = 0; j < i; j++) {
                msg[j] = new Array(7)
                //数组中7个值分别有如下含义
                //当计时比较短时，可能会有开始和结束同样值，因为舍弃了单位秒
                //year,month,date,begain,ends,times,pause

                var dates = res.data.content[j].dates.split(".");
                var begain = res.data.content[j].begain.split(":");
                var ends = res.data.content[j].ends.split(":");
                var times = res.data.content[j].times;
                var pause = res.data.content[j].pause;

                //只有当每一个新的年份第一次出现时，
                //msg[j][0]才置位该年份
                //否则为0，表示同上

                if (dates[0] == k) {
                    k--;
                    msg[j][0] = dates[0];

                } else {
                    msg[j][0] = 0;
                }

                //只有当每一个新的月份第一次出现时，
                //msg[j][1]才置位该月份
                //否则为0，表示同上
                console.log(dates[1]+"---"+t)
                if (dates[1] != t) {
                    //t--;
                    //msg[j][1] = dates[1];
                    msg[j][1] = dates[1];
                    t=dates[1]
                } else {
                    msg[j][1] = 0;
                }

                //当t=0时应该置t=12，表示当年一月份后的下一个月份应但是次年12月
                if(t==0) {t=12;}

                msg[j][2] = dates[2];
                msg[j][3] = begain[0] + ":" + begain[1];
                msg[j][4] = ends[0] + ":" + ends[1];

                if(times<60){
                  msg[j][5] = times + "秒"
                }else if(times<3600){
                  msg[j][5] = times%60 + "分钟"
                }else{
                  msg[j][5] = times%3600 + "小时"
                }

                msg[j][6] = pause;

            }
            console.log(msg);

            that.msg=msg
            that.$apply()
            //console.log(that.data.msg)

          }
           

          }

      })
    }
    
    
  }
</script>
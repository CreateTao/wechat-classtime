<!--排行榜-->
<style>
.canvas {
  width: 700rpx;
    height: 488rpx;
}

.top-three{
  width: 700rpx;
  display: flex;
  flex-direction: column;
  border-radius: 10rpx;
  flex-direction: column;
}
.top-item{
  width: 700rpx;
  height: 80rpx;
  font-size: 45rpx;
  display: flex;
  flex-direction: row;
  justify-content: center;
}
.top-item text{
  width: 250rpx;
  height: 100rpx;
  line-height: 100rpx;
  text-align: center;
}

.ranking-button{
  margin-top: 50rpx;
  display: flex;
  flex-direction: row;
}
.default{
  font-size: 35rpx;
  padding: 15rpx 50rpx;
  margin: 3rpx 20rpx;
  border-radius: 15rpx;
  background-color: #CCE6FF;
}
.choose{
  background-color: #2d8cf0;
}

.list{
  width: 700rpx;
  display: flex;
  flex-direction: column;
  border:2rpx solid #dddee1;
  border-top: 2rpx solid #2d8cf0;
  border-radius: 10rpx;
}
.list-item{
  width: 100%;
  height: 80rpx;
  line-height: 80rpx;
  display: flex;
  flex-direction: row;
  border:1rpx solid #dddee1;
}
.list-item text{
  width: 200rpx;
  height: 80rpx;
  line-height: 80rpx;
  text-align: center;
  font-size: 40rpx;
  text-overflow: ellipsis;
  overflow: hidden;
  white-space: nowrap;
}
</style>

<template>
	<view class="cu-custom" style="height:{{CustomBar}}px;">
  <view class="cu-bar fixed gradual-blue" style="height:{{CustomBar}}px;padding-top:{{StatusBar}}px;">
  <navigator class='action' open-type="navigateBack" delta="1" hover-class="none">
      <text class='icon-back'></text>排行榜
    </navigator>
  </view>
  </view>


  <view class="container" >

    <canvas canvas-id="ringCanvas" class="canvas" ></canvas>

    <view class="top-three">

      <view class="top-item" style="color:#7CB5EC;">
        <text>状元：</text>
        <text style="margin-left:25rpx;">{{one}}</text>
      </view>

      <view class="top-item" style="color:#F7A35C;">
        <text>榜眼：</text>
        <text style="margin-left:25rpx;">{{two}}</text>
      </view>

      <view class="top-item" style="color:#434348;">
        <text>探花：</text>
        <text style="margin-left:25rpx;">{{three}}</text>
      </view>

    </view>

    <view class="ranking-button" >
      <view class="default {{button=='day'?'choose':''}}" @tap="day">日榜</view>
      <view class="default {{button=='week'?'choose':''}}" @tap="week">周榜</view>
      <view class="default {{button=='history'?'choose':''}}" @tap="history">历史排行榜</view>
    </view>

    <view class="list">

      <view class="list-item" >
        <text>排名</text>
        <text style="margin-left:50rpx;">姓名</text>
        <text style="margin-left:50rpx;font-size:30rpx;width:200rpx;">专注时间\秒</text>
      </view>

      <view class="list-item" wx:for="{{element}}">
        <text>{{index+1}}</text>
        <text style="margin-left:50rpx;">{{item.name}}</text>
        <text style="margin-left:50rpx;">{{item.times}}</text>
      </view>

    </view>



  </view>


</template>


<script>
  import wepy from 'wepy'
  var wxCharts = require('../components/wxcharts-min.js')
  var ringChart = null

  export default class Rangking extends wepy.page {
    config = {
      navigationBarTitleText: '排行榜',
      usingComponents:{
      },
      enablePullDownRefresh: true,//关闭下拉刷新 
      backgroundTextStyle: "dark",//白色主题启用深色模式，在下拉刷新时才能有白色圆点
    }
    components = {
    }

    mixins = []

    data = {
     StatusBar:"",
     CustomBar:"",
     one:"张三",
     two:"李四",
     three:"王五",
     elements:[],//这是保存三个排行榜的数组
     element:[],//这是保存用来渲染前端被选中的那个排行榜的数组
     button:"day",//默认选择日榜
    }

    computed = {
      
    }

    methods = {
      day(){
        //day
        this.button="day"
        this.draw(0)
      },
      week(){
        //week
        this.button="week"
        this.draw(1)
      },
      history(){
        //year
        this.button="history"
        this.draw(2)
      }
    }

    events = {
      
    }

    onLoad(options) {
      //生命周期函数--监听页面加载
      this.StatusBar=this.$parent.globalData.StatusBar
      this.CustomBar=this.$parent.globalData.CustomBar
      this.getMsg()
    }


    onPullDownRefresh(){
      //页面相关事件处理函数--监听用户下拉动作
      this.log("onPullDownRefresh")
      this.getMsg()
      setTimeout(function(){  wx.stopPullDownRefresh()},1000)
    }

    toast(title,icon,duration){
      //自己封装的Toast函数
      wx.showToast({
        title:title,
        icon: icon,
        duration:duration
      })
    }

    log(res){
      //自己封装的log函数
      console.log("rangking:  "+res)
    }

    getMsg(){
      var that=this
      wx.request({
      url:that.$parent.globalData.url + "time/queryRank",
      method: 'GET',
      data: {},
      header: {
        "Content-Type": "application/x-www-form-urlencoded"
      },
      complete: function (res) {
        if (res.statusCode != 200) {
          that.log("网络传输有错误！");
          that.toast("网络连接失败！","",1500)
        } else if(res.data==""){
          that.toast("服务器出错！","",700)
        }else{
          //得到的数据时从大到小排列的
          that.elements=res.data
          that.element=res.data[0]
          console.log(res.data)
          that.$apply()
          
          //日榜和周榜可能没有数据，为了美观，找到一个有数据的排行榜显示
          let i=0
          while(i<3){
            if(res.data[i].length!=0){
              that.draw(i)
              if(i==0) that.button="day";
              if(i==1) that.button="week";
              if(i==2) that.button="history";
              break;
            }
            i++
          }

          //三个排行榜都没数据则显示第一个
          if(res.data.length==0)
            that.draw(0);
          
          that.$apply()
        }
      }
    })
    }

    /**
    *0代表日榜
    *1代表周榜
    *2代表历史排行榜
    */
    draw(num){
      let windowWidth = 320
      let windowHeight=0
      let fontSize=0
      let ratio=0

      let length=this.data.elements[num].length
      let array=this.data.elements[num]
      //a,b,c全为零画的图不好看
      let a=10
      let b=10
      let c=10

      this.element=this.data.elements[num]

      //为前三甲赋值
      for (let i = 0; i <3; i++) {
        if(i <= length-1 && i==0) {
          this.one=array[i].name
          a=array[i].times
        }
        if(i <= length-1 && i==1) {
          this.two=array[i].name
          b=array[i].times
        }
        if(i <= length-1 && i==2 ){
          this.three=array[i].name
          c=array[i].times
        }
      }

      try {
          var res = wx.getSystemInfoSync();
          windowWidth = res.windowWidth;
          windowHeight =res.windowHeight * 0.35
          //大致估算下圆环中心的字体大小
          ratio=windowWidth / 414
          fontSize=(res.fontSizeSetting + 10) * ratio 
          //console.log(windowWidth+"---"+windowHeight+"---"+fontSize)
      } catch (e) {
          console.error('getSystemInfoSync failed!');
      }

      ringChart = new wxCharts({
            animation: true,
            canvasId: 'ringCanvas',
            type: 'ring',
            extra: {
                ringWidth: 50,
                pie: {
                    offsetAngle: -45
                }
            },
            title: {
                name: '前三甲',
                color: '#7cb5ec',
                fontSize: fontSize
            },
            series: [{
                name: '状元',
                data: a,
                stroke: false
            }, {
                name: '榜眼',
                data:b,
                 stroke: false
            }, {
                name: '探花',
                data: c,
                stroke: false
            }],
            disablePieStroke: true,
            width: windowWidth,
            height: windowHeight,
            dataLabel: false,
            legend: false,
            background: '#f5f5f5',
            padding: 0
        });
        ringChart.addEventListener('renderComplete', () => {
            console.log('renderComplete');
        });
        setTimeout(() => {
            ringChart.stopAnimation();
        }, 500);

        if(this.data.elements[num].length==0) 
          this.toast("目前还没人哦！","none",2000);
    }
    
    
  }
</script>
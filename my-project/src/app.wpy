<style >

@import "colorui/main.wxss";
@import "colorui/icon.wxss";
 

.container {height: 100%;width:100%; display: flex;flex-direction: column;align-items: center;justify-content: space-between;box-sizing: border-box;}

/*这里是每个页面下半部分的介绍区域的css code*/
.text-light {
  font-weight: 300;
}

.introduce-text{
  width: 100%;
  background-color: #ffffff;
  color: #8799A3;
  padding: 30rpx 10rpx 30rpx 50rpx;
  margin-bottom:200rpx;
  border-top: solid 3rpx #F0F0F0;
}

/*常用的输入框格式*/
  .input{margin-bottom: 50rpx;border-radius:10rpx;border:1rpx solid #c8cccf;color:#6a6f77;padding:10rpx;text-align:center;width: 500rpx;height: 100rpx;line-height: 80rpx;font-size: 35rpx;}

/*用来做记录展示页底部的分页框*/
 .record-bottom{width: 700rpx;height: 50rpx;display: flex;flex-direction: row;align-items: center;margin-top: 30rpx;}
.re-bo-item{width: 100rpx;height: 50rpx;display: flex;flex-direction: column;align-items: center;}


/*文字太长就隐藏*/
.long-hide{overflow: hidden; white-space: nowrap; text-overflow: ellipsis;}

</style>

<script>
import wepy from 'wepy'
import 'wepy-async-function'


export default class extends wepy.app {
  config = {
    pages: [
    'pages/index2',
      'pages/index',
      'pages/identity',
      'pages/createRoom',
      'pages/getRoom',
      'pages/myRecord',
      'pages/myRoomRecord',
      'pages/roomMsg',
      'pages/time',
      'pages/test',
      'pages/record',
      'pages/ranking'
    ],
    window: {
      backgroundTextStyle: 'light',
      navigationBarBackgroundColor: '#fff',
      navigationBarTitleText: '无机课堂',
      navigationBarTextStyle: 'black',
      navigationStyle:"custom",
      enablePullDownRefresh: false,//开启下拉刷新 
    },
    "tabBar":{
    "color":"#000",
    "selectedColor": "#FBBD08",
    "backgroundColor": "#F1F1F1",
    "list":[
      {
       "pagePath":"pages/index2",
       "iconPath":"./image/11.png",
       "selectedIconPath":"./image/1.png",
       "text":"主页"
       },
      {
        "pagePath": "pages/time",
        "iconPath": "./image/22.png",
        "selectedIconPath":"./image/2.png",
        "text": "专注"
      },
      {
        "pagePath": "pages/ranking",
        "iconPath": "./image/33.png",
        "selectedIconPath":"./image/3.png",
        "text": "匠心"
      }
    ]
  },
 "usingComponents": {}

  }

  globalData = {
    userInfo: "",
    roomId:"",//房间号
    remark:"",//房间备注
    roomIds:1,//房间在数据库表中的主键id,默认为1，表示没有加入房间
    isbind:true,//是否绑定账号
    schoolId:"",//学号
    schoolName:"",//绑定的姓名
    //url:"https://daliu.mynatapp.cc/classtime/",
    url:"https://www.classtime.top/classtime/classtime/",
    openId:"",
    netWorkType:"",
    flag:true,//这个标志位用来控制向后台发送的次数
    StatusBar:"",//控制上方导航栏的参数
    CustomBar:"",//控制上方导航栏的参数
    flag:true,//用来控制time中online和suspend的发送
    imageNumber:7,//index2界面轮播展示的图片数
    version:1,//小程序版本，修改此值，可导致重新加载一些图片。每次要重新加载图片更新此图片即可。
  }

  constructor () {
    super()
    this.use('requestfix')
  }

  onLaunch() {
    this.testAsync()
    wx.getSystemInfo({
      success: e => {
        this.globalData.StatusBar = e.statusBarHeight;
        this.globalData.CustomBar = e.platform == 'android' ? e.statusBarHeight + 50 : e.statusBarHeight + 45;
      }
    })
  }

  sleep (s) {
    return new Promise((resolve, reject) => {
      setTimeout(() => {
        resolve('promise resolved')
      }, s * 1000)
    })
  }

  async testAsync () {
    const data = await this.sleep(3)
    console.log(data)
  }

  getUserInfo(cb) {
    const that = this
    if (this.globalData.userInfo) {
      return this.globalData.userInfo
    }
    wepy.getUserInfo({
      success (res) {
        that.globalData.userInfo = res.userInfo
        cb && cb(res.userInfo)
      }
    })
  }

  isNumber(val) { 
    var regPos = /^\d+(\.\d+)?$/; //非负浮点数
    var regNeg = /^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$/; //负浮点数
    if(regPos.test(val) || regNeg.test(val)) {
        return true;
    } else {
        return false;
    }
  }

    /**
   * wxPromisify
   * @fn 传入的函数，如wx.request、wx.download
   */
  wxPromisify(fn) {
    return function (obj = {}) {
      return new Promise((resolve, reject) => {
        obj.success = function (res) {
          resolve(res)
        }

        obj.fail = function (res) {
          reject(res)
        }

        fn(obj)//执行函数，obj为传入函数的参数
      })
    }
    
  }


}
</script>
